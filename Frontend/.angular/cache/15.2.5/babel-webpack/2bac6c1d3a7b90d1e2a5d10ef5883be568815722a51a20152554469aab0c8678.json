{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, forwardRef, Component, ViewEncapsulation, Optional, Self, ViewChild, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState } from '@angular/material/core';\nimport * as i7 from '@angular/material/legacy-form-field';\nimport { MatLegacyFormFieldControl, MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2 from '@angular/forms';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/material/legacy-button';\nimport { MatLegacyButtonModule } from '@angular/material/legacy-button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatLegacyInputModule } from '@angular/material/legacy-input';\nconst _c0 = [\"inputFile\"];\nconst _c1 = [\"inputValue\"];\nfunction NgxMatFileInputComponent_mat_icon_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 7);\n    i0.ɵɵtext(1, \"attach_file\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c2 = [[[\"\", \"ngxMatFileInputIcon\", \"\"]]];\nconst _c3 = [\"[ngxMatFileInputIcon]\"];\nlet nextUniqueId = 0;\nconst _NgxMatInputMixinBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n    this.stateChanges = new Subject();\n  }\n});\nclass NgxMatFileInputIcon {}\n/** @nocollapse */\nNgxMatFileInputIcon.ɵfac = function NgxMatFileInputIcon_Factory(t) {\n  return new (t || NgxMatFileInputIcon)();\n};\n/** @nocollapse */\nNgxMatFileInputIcon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatFileInputIcon,\n  selectors: [[\"\", \"ngxMatFileInputIcon\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatFileInputIcon, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatFileInputIcon]'\n    }]\n  }], null, null);\n})();\nclass NgxMatFileInputComponent extends _NgxMatInputMixinBase {\n  constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._cd = _cd;\n    this.ngControl = ngControl;\n    this.color = 'primary';\n    this.fileNames = null;\n    this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;\n    this.stateChanges = new Subject();\n    this.focused = false;\n    this.controlType = 'ngx-mat-file-input';\n    this.autofilled = false;\n    /** Function when touched */\n    this._onTouched = () => {};\n    /** Function when changed */\n    this._onChange = () => {};\n    this._disabled = false;\n    this._multiple = false;\n    this.placeholder = 'Choose a file';\n    this.separator = ',';\n    this._required = false;\n    this._readonly = true;\n    this.id = this.id;\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || this._uid;\n  }\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    this._value = value;\n  }\n  get readonly() {\n    return this._readonly;\n  }\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n  /**\r\n   * Limiting accepted file types\r\n   * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" — Accept PNG or JPEG files.\r\n   */\n  get accept() {\n    return this._accept;\n  }\n  set accept(value) {\n    this._accept = value;\n  }\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    this._updateInputValue(value);\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /** Focuses the input. */\n  focus(options) {\n    this._inputValueRef.nativeElement.focus(options);\n  }\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._cd.markForCheck();\n    this.stateChanges.next();\n  }\n  _isBadInput() {\n    let validity = this._inputValueRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n  get empty() {\n    return !this._inputValueRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  openFilePicker(event) {\n    this._inputFileRef.nativeElement.click();\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this._markAsTouched();\n  }\n  handleFiles(filelist) {\n    if (filelist.length > 0) {\n      const files = new Array();\n      for (let i = 0; i < filelist.length; i++) {\n        files.push(filelist.item(i));\n      }\n      this._updateInputValue(files);\n      this._resetInputFile();\n      this._onChange(this.multiple ? files : files[0]);\n    }\n  }\n  /** Handles a click on the control's container. */\n  onContainerClick(event) {}\n  _resetInputFile() {\n    this._inputFileRef.nativeElement.value = \"\";\n  }\n  _updateInputValue(files) {\n    let text = null;\n    if (files) {\n      if (Array.isArray(files)) {\n        text = this._multiple ? files.map(x => x.name).join(this.separator) : files[0].name;\n      } else {\n        text = files.name != null ? files.name : null;\n      }\n    }\n    this._inputValueRef.nativeElement.value = text;\n  }\n}\n/** @nocollapse */\nNgxMatFileInputComponent.ɵfac = function NgxMatFileInputComponent_Factory(t) {\n  return new (t || NgxMatFileInputComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.NgControl, 10), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher));\n};\n/** @nocollapse */\nNgxMatFileInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatFileInputComponent,\n  selectors: [[\"ngx-mat-file-input\"]],\n  contentQueries: function NgxMatFileInputComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, NgxMatFileInputIcon, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n    }\n  },\n  viewQuery: function NgxMatFileInputComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n      i0.ɵɵviewQuery(_c1, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputFileRef = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputValueRef = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ngx-mat-file-input\"],\n  inputs: {\n    color: \"color\",\n    disabled: \"disabled\",\n    id: \"id\",\n    multiple: \"multiple\",\n    placeholder: \"placeholder\",\n    separator: \"separator\",\n    required: \"required\",\n    errorStateMatcher: \"errorStateMatcher\",\n    value: \"value\",\n    readonly: \"readonly\",\n    accept: \"accept\"\n  },\n  exportAs: [\"ngx-mat-file-input\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatLegacyFormFieldControl,\n    useExisting: forwardRef(() => NgxMatFileInputComponent)\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c3,\n  decls: 8,\n  vars: 13,\n  consts: [[\"autocomplete\", \"off\", 1, \"mat-input-element\", \"mat-form-field-autofill-control\", 3, \"disabled\", \"required\"], [\"inputValue\", \"\"], [1, \"mat-form-field-suffix\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"type\", \"button\", 1, \"button-browse\", 3, \"color\", \"disabled\", \"click\"], [\"class\", \"ngx-mat-file-input--default-icon\", 4, \"ngIf\"], [\"type\", \"file\", 1, \"input-file\", 3, \"multiple\", \"accept\", \"change\"], [\"inputFile\", \"\"], [1, \"ngx-mat-file-input--default-icon\"]],\n  template: function NgxMatFileInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelement(0, \"input\", 0, 1);\n      i0.ɵɵelementStart(2, \"div\", 2)(3, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function NgxMatFileInputComponent_Template_button_click_3_listener($event) {\n        return ctx.openFilePicker($event);\n      });\n      i0.ɵɵtemplate(4, NgxMatFileInputComponent_mat_icon_4_Template, 2, 0, \"mat-icon\", 4);\n      i0.ɵɵprojection(5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"input\", 5, 6);\n      i0.ɵɵlistener(\"change\", function NgxMatFileInputComponent_Template_input_change_6_listener($event) {\n        return ctx.handleFiles($event.target.files);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      i0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"color\", ctx.color)(\"disabled\", ctx.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx._customIcon);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"multiple\", ctx.multiple)(\"accept\", ctx.accept);\n    }\n  },\n  dependencies: [i4.NgIf, i5.MatLegacyButton, i6.MatIcon, i7.MatLegacySuffix],\n  styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatFileInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-file-input',\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'ngx-mat-file-input'\n      },\n      providers: [{\n        provide: MatLegacyFormFieldControl,\n        useExisting: forwardRef(() => NgxMatFileInputComponent)\n      }],\n      exportAs: 'ngx-mat-file-input',\n      template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\",\n      styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.ErrorStateMatcher\n    }];\n  }, {\n    _inputFileRef: [{\n      type: ViewChild,\n      args: ['inputFile', {\n        static: true\n      }]\n    }],\n    _inputValueRef: [{\n      type: ViewChild,\n      args: ['inputValue', {\n        static: true\n      }]\n    }],\n    _customIcon: [{\n      type: ContentChild,\n      args: [NgxMatFileInputIcon]\n    }],\n    color: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    separator: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    accept: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatFileInputModule {}\n/** @nocollapse */\nNgxMatFileInputModule.ɵfac = function NgxMatFileInputModule_Factory(t) {\n  return new (t || NgxMatFileInputModule)();\n};\n/** @nocollapse */\nNgxMatFileInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatFileInputModule\n});\n/** @nocollapse */\nNgxMatFileInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, MatLegacyButtonModule, MatIconModule, MatLegacyFormFieldModule, MatLegacyInputModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatFileInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxMatFileInputComponent, NgxMatFileInputIcon],\n      imports: [CommonModule, MatLegacyButtonModule, MatIconModule, MatLegacyFormFieldModule, MatLegacyInputModule],\n      exports: [NgxMatFileInputComponent, NgxMatFileInputIcon]\n    }]\n  }], null, null);\n})();\nfunction calculFileSize(number) {\n  if (number < 1024) {\n    return number + 'bytes';\n  } else if (number >= 1024 && number < 1048576) {\n    return (number / 1024).toFixed(1) + 'KB';\n  } else if (number >= 1048576) {\n    return (number / 1048576).toFixed(1) + 'MB';\n  }\n}\n\n/**\r\n * Validator for size of file\r\n * @param max Max of size of file (in bytes)\r\n */\nfunction MaxSizeValidator(max) {\n  return ctrl => {\n    max = Number(max);\n    if (isNaN(max)) {\n      throw 'MaxSizeValidator: max of size of file is invalid';\n    }\n    if (!ctrl.value) return null;\n    let files = ctrl.value;\n    if (!Array.isArray(ctrl.value)) {\n      files = [ctrl.value];\n    }\n    if (!files.length) return null;\n    const add = (a, b) => a + b;\n    const sumSize = files.map(x => x.size).reduce(add);\n    if (sumSize > max) {\n      return {\n        maxSize: true\n      };\n    }\n    return null;\n  };\n}\n\n/**\r\n *\r\n * @param accept Allowable type of file\r\n */\nfunction AcceptValidator(accept) {\n  return ctrl => {\n    if (!accept) {\n      throw 'AcceptValidator: allowable type of file can not be empty';\n    }\n    if (ctrl.value == null) return null;\n    if (!accept.includes(ctrl.value.type)) {\n      return {\n        accept: true\n      };\n    }\n    return null;\n  };\n}\n\n/*\r\n * Public API Surface of file-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AcceptValidator, MaxSizeValidator, NgxMatFileInputComponent, NgxMatFileInputIcon, NgxMatFileInputModule, calculFileSize };","map":{"version":3,"names":["coerceBooleanProperty","i0","Directive","forwardRef","Component","ViewEncapsulation","Optional","Self","ViewChild","ContentChild","Input","NgModule","i3","mixinErrorState","i7","MatLegacyFormFieldControl","MatLegacyFormFieldModule","Subject","i1","i2","i4","CommonModule","i5","MatLegacyButtonModule","i6","MatIconModule","MatLegacyInputModule","nextUniqueId","_NgxMatInputMixinBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","NgxMatFileInputIcon","ɵfac","ɵdir","type","args","selector","NgxMatFileInputComponent","_elementRef","_platform","_cd","color","fileNames","_uid","focused","controlType","autofilled","_onTouched","_onChange","_disabled","_multiple","placeholder","separator","_required","_readonly","id","valueAccessor","disabled","value","next","_id","multiple","required","_value","readonly","accept","_accept","ngOnChanges","ngOnDestroy","complete","ngDoCheck","updateErrorState","writeValue","_updateInputValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focus","options","_inputValueRef","nativeElement","_focusChanged","isFocused","_markAsTouched","markForCheck","_isBadInput","validity","badInput","empty","shouldLabelFloat","setDescribedByIds","ids","_ariaDescribedby","join","openFilePicker","event","_inputFileRef","click","preventDefault","stopPropagation","handleFiles","filelist","length","files","Array","i","push","item","_resetInputFile","onContainerClick","text","isArray","map","x","name","ElementRef","Platform","ChangeDetectorRef","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","ɵcmp","provide","useExisting","NgIf","MatLegacyButton","MatIcon","MatLegacySuffix","encapsulation","None","host","providers","exportAs","template","styles","decorators","static","_customIcon","errorStateMatcher","NgxMatFileInputModule","ɵmod","ɵinj","declarations","imports","exports","calculFileSize","number","toFixed","MaxSizeValidator","max","ctrl","Number","isNaN","add","a","b","sumSize","size","reduce","maxSize","AcceptValidator","includes"],"sources":["C:/Users/bruna/OneDrive/Área de Trabalho/ProjetoEventsManager/Frontend/node_modules/@angular-material-components/file-input/fesm2020/angular-material-components-file-input.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, forwardRef, Component, ViewEncapsulation, Optional, Self, ViewChild, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState } from '@angular/material/core';\nimport * as i7 from '@angular/material/legacy-form-field';\nimport { MatLegacyFormFieldControl, MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2 from '@angular/forms';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/material/legacy-button';\nimport { MatLegacyButtonModule } from '@angular/material/legacy-button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatLegacyInputModule } from '@angular/material/legacy-input';\n\nlet nextUniqueId = 0;\r\nconst _NgxMatInputMixinBase = mixinErrorState(class {\r\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \r\n    /** @docs-private */\r\n    ngControl) {\r\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\r\n        this._parentForm = _parentForm;\r\n        this._parentFormGroup = _parentFormGroup;\r\n        this.ngControl = ngControl;\r\n        this.stateChanges = new Subject();\r\n    }\r\n});\r\nclass NgxMatFileInputIcon {\r\n}\r\n/** @nocollapse */ NgxMatFileInputIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatFileInputIcon, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ NgxMatFileInputIcon.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatFileInputIcon, selector: \"[ngxMatFileInputIcon]\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatFileInputIcon, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxMatFileInputIcon]'\r\n                }]\r\n        }] });\r\nclass NgxMatFileInputComponent extends _NgxMatInputMixinBase {\r\n    constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {\r\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n        this._elementRef = _elementRef;\r\n        this._platform = _platform;\r\n        this._cd = _cd;\r\n        this.ngControl = ngControl;\r\n        this.color = 'primary';\r\n        this.fileNames = null;\r\n        this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;\r\n        this.stateChanges = new Subject();\r\n        this.focused = false;\r\n        this.controlType = 'ngx-mat-file-input';\r\n        this.autofilled = false;\r\n        /** Function when touched */\r\n        this._onTouched = () => { };\r\n        /** Function when changed */\r\n        this._onChange = () => { };\r\n        this._disabled = false;\r\n        this._multiple = false;\r\n        this.placeholder = 'Choose a file';\r\n        this.separator = ',';\r\n        this._required = false;\r\n        this._readonly = true;\r\n        this.id = this.id;\r\n        if (this.ngControl) {\r\n            this.ngControl.valueAccessor = this;\r\n        }\r\n    }\r\n    get disabled() {\r\n        if (this.ngControl && this.ngControl.disabled !== null) {\r\n            return this.ngControl.disabled;\r\n        }\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        if (this.focused) {\r\n            this.focused = false;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    get id() { return this._id; }\r\n    set id(value) { this._id = value || this._uid; }\r\n    get multiple() { return this._multiple; }\r\n    set multiple(value) {\r\n        this._multiple = coerceBooleanProperty(value);\r\n    }\r\n    get required() { return this._required; }\r\n    set required(value) { this._required = coerceBooleanProperty(value); }\r\n    get value() { return this._value; }\r\n    set value(value) {\r\n        this._value = value;\r\n    }\r\n    get readonly() { return this._readonly; }\r\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\r\n    /**\r\n     * Limiting accepted file types\r\n     * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" — Accept PNG or JPEG files.\r\n     */\r\n    get accept() { return this._accept; }\r\n    set accept(value) {\r\n        this._accept = value;\r\n    }\r\n    ngOnChanges() {\r\n        this.stateChanges.next();\r\n    }\r\n    ngOnDestroy() {\r\n        this.stateChanges.complete();\r\n    }\r\n    ngDoCheck() {\r\n        if (this.ngControl) {\r\n            this.updateErrorState();\r\n        }\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value) {\r\n        this._updateInputValue(value);\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this.stateChanges.next();\r\n    }\r\n    /** Focuses the input. */\r\n    focus(options) {\r\n        this._inputValueRef.nativeElement.focus(options);\r\n    }\r\n    _focusChanged(isFocused) {\r\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\r\n            this.focused = isFocused;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /** Mark the field as touched */\r\n    _markAsTouched() {\r\n        this._onTouched();\r\n        this._cd.markForCheck();\r\n        this.stateChanges.next();\r\n    }\r\n    _isBadInput() {\r\n        let validity = this._inputValueRef.nativeElement.validity;\r\n        return validity && validity.badInput;\r\n    }\r\n    get empty() {\r\n        return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&\r\n            !this.autofilled;\r\n    }\r\n    get shouldLabelFloat() {\r\n        return this.focused || !this.empty;\r\n    }\r\n    setDescribedByIds(ids) {\r\n        this._ariaDescribedby = ids.join(' ');\r\n    }\r\n    openFilePicker(event) {\r\n        this._inputFileRef.nativeElement.click();\r\n        if (event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        this._markAsTouched();\r\n    }\r\n    handleFiles(filelist) {\r\n        if (filelist.length > 0) {\r\n            const files = new Array();\r\n            for (let i = 0; i < filelist.length; i++) {\r\n                files.push(filelist.item(i));\r\n            }\r\n            this._updateInputValue(files);\r\n            this._resetInputFile();\r\n            this._onChange(this.multiple ? files : files[0]);\r\n        }\r\n    }\r\n    /** Handles a click on the control's container. */\r\n    onContainerClick(event) { }\r\n    ;\r\n    _resetInputFile() {\r\n        this._inputFileRef.nativeElement.value = \"\";\r\n    }\r\n    _updateInputValue(files) {\r\n        let text = null;\r\n        if (files) {\r\n            if (Array.isArray(files)) {\r\n                text = this._multiple\r\n                    ? files.map(x => x.name).join(this.separator)\r\n                    : files[0].name;\r\n            }\r\n            else {\r\n                text = files.name != null ? files.name : null;\r\n            }\r\n        }\r\n        this._inputValueRef.nativeElement.value = text;\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatFileInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatFileInputComponent, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.ChangeDetectorRef }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatFileInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatFileInputComponent, selector: \"ngx-mat-file-input\", inputs: { color: \"color\", disabled: \"disabled\", id: \"id\", multiple: \"multiple\", placeholder: \"placeholder\", separator: \"separator\", required: \"required\", errorStateMatcher: \"errorStateMatcher\", value: \"value\", readonly: \"readonly\", accept: \"accept\" }, host: { classAttribute: \"ngx-mat-file-input\" }, providers: [\r\n        { provide: MatLegacyFormFieldControl, useExisting: forwardRef((() => NgxMatFileInputComponent)) }\r\n    ], queries: [{ propertyName: \"_customIcon\", first: true, predicate: NgxMatFileInputIcon, descendants: true }], viewQueries: [{ propertyName: \"_inputFileRef\", first: true, predicate: [\"inputFile\"], descendants: true, static: true }, { propertyName: \"_inputValueRef\", first: true, predicate: [\"inputValue\"], descendants: true, static: true }], exportAs: [\"ngx-mat-file-input\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"], dependencies: [{ kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i5.MatLegacyButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i6.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"directive\", type: i7.MatLegacySuffix, selector: \"[matSuffix]\" }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatFileInputComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-file-input', encapsulation: ViewEncapsulation.None, host: {\r\n                        'class': 'ngx-mat-file-input'\r\n                    }, providers: [\r\n                        { provide: MatLegacyFormFieldControl, useExisting: forwardRef((() => NgxMatFileInputComponent)) }\r\n                    ], exportAs: 'ngx-mat-file-input', template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.ChangeDetectorRef }, { type: i2.NgControl, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Self\r\n                }] }, { type: i2.NgForm, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i2.FormGroupDirective, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i3.ErrorStateMatcher }]; }, propDecorators: { _inputFileRef: [{\r\n                type: ViewChild,\r\n                args: ['inputFile', { static: true }]\r\n            }], _inputValueRef: [{\r\n                type: ViewChild,\r\n                args: ['inputValue', { static: true }]\r\n            }], _customIcon: [{\r\n                type: ContentChild,\r\n                args: [NgxMatFileInputIcon]\r\n            }], color: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], id: [{\r\n                type: Input\r\n            }], multiple: [{\r\n                type: Input\r\n            }], placeholder: [{\r\n                type: Input\r\n            }], separator: [{\r\n                type: Input\r\n            }], required: [{\r\n                type: Input\r\n            }], errorStateMatcher: [{\r\n                type: Input\r\n            }], value: [{\r\n                type: Input\r\n            }], readonly: [{\r\n                type: Input\r\n            }], accept: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatFileInputModule {\r\n}\r\n/** @nocollapse */ NgxMatFileInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatFileInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMatFileInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatFileInputModule, declarations: [NgxMatFileInputComponent,\r\n        NgxMatFileInputIcon], imports: [CommonModule,\r\n        MatLegacyButtonModule,\r\n        MatIconModule,\r\n        MatLegacyFormFieldModule,\r\n        MatLegacyInputModule], exports: [NgxMatFileInputComponent,\r\n        NgxMatFileInputIcon] });\r\n/** @nocollapse */ NgxMatFileInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatFileInputModule, imports: [CommonModule,\r\n        MatLegacyButtonModule,\r\n        MatIconModule,\r\n        MatLegacyFormFieldModule,\r\n        MatLegacyInputModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatFileInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxMatFileInputComponent,\r\n                        NgxMatFileInputIcon\r\n                    ],\r\n                    imports: [\r\n                        CommonModule,\r\n                        MatLegacyButtonModule,\r\n                        MatIconModule,\r\n                        MatLegacyFormFieldModule,\r\n                        MatLegacyInputModule\r\n                    ],\r\n                    exports: [\r\n                        NgxMatFileInputComponent,\r\n                        NgxMatFileInputIcon\r\n                    ]\r\n                }]\r\n        }] });\n\nfunction calculFileSize(number) {\r\n    if (number < 1024) {\r\n        return number + 'bytes';\r\n    }\r\n    else if (number >= 1024 && number < 1048576) {\r\n        return (number / 1024).toFixed(1) + 'KB';\r\n    }\r\n    else if (number >= 1048576) {\r\n        return (number / 1048576).toFixed(1) + 'MB';\r\n    }\r\n}\n\n/**\r\n * Validator for size of file\r\n * @param max Max of size of file (in bytes)\r\n */\r\nfunction MaxSizeValidator(max) {\r\n    return (ctrl) => {\r\n        max = Number(max);\r\n        if (isNaN(max)) {\r\n            throw 'MaxSizeValidator: max of size of file is invalid';\r\n        }\r\n        if (!ctrl.value)\r\n            return null;\r\n        let files = ctrl.value;\r\n        if (!Array.isArray(ctrl.value)) {\r\n            files = [ctrl.value];\r\n        }\r\n        if (!files.length)\r\n            return null;\r\n        const add = (a, b) => a + b;\r\n        const sumSize = files.map(x => x.size).reduce(add);\r\n        if (sumSize > max) {\r\n            return {\r\n                maxSize: true\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n}\n\n/**\r\n *\r\n * @param accept Allowable type of file\r\n */\r\nfunction AcceptValidator(accept) {\r\n    return (ctrl) => {\r\n        if (!accept) {\r\n            throw ('AcceptValidator: allowable type of file can not be empty');\r\n        }\r\n        if (ctrl.value == null)\r\n            return null;\r\n        if (!accept.includes(ctrl.value.type)) {\r\n            return {\r\n                accept: true\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n}\n\n/*\r\n * Public API Surface of file-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AcceptValidator, MaxSizeValidator, NgxMatFileInputComponent, NgxMatFileInputIcon, NgxMatFileInputModule, calculFileSize };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
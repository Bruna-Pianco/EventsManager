{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UsuarioService {\n  constructor(httpClient, router) {\n    this.httpClient = httpClient;\n    this.router = router;\n  }\n  logar(usuario) {\n    return this.mockUsuarioLogin(usuario).pipe(tap(resposta => {\n      if (!resposta.sucesso) return;\n      localStorage.setItem('token', btoa(JSON.stringify(\"TokenQueSeriaGeradoPelaAPI\")));\n      localStorage.setItem('usuario', btoa(JSON.stringify(usuario)));\n      this.router.navigate(['']);\n    }));\n  }\n  mockUsuarioLogin(usuario) {\n    var retornoMock = [];\n    if (usuario.email === \"admin\" && usuario.senha == \"admin\") {\n      retornoMock.sucesso = true;\n      retornoMock.usuario = usuario;\n      retornoMock.token = \"TokenQueSeriaGeradoPelaAPI\";\n      return of(retornoMock);\n    }\n    retornoMock.sucesso = false;\n    retornoMock.usuario = usuario;\n    return of(retornoMock);\n  }\n  deslogar() {\n    localStorage.clear();\n    this.router.navigate(['login']);\n  }\n  get logado() {\n    return localStorage.getItem('token') ? true : false;\n  }\n}\nUsuarioService.ɵfac = function UsuarioService_Factory(t) {\n  return new (t || UsuarioService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nUsuarioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioService,\n  factory: UsuarioService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,QAAQ,gBAAgB;;;;AAMpC,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB,EAChCC,MAAc;IADJ,eAAU,GAAVD,UAAU;IACpB,WAAM,GAANC,MAAM;EAAU;EAExBC,KAAK,CAACC,OAAiB;IACrB,OAAO,IAAI,CAACC,gBAAgB,CAACD,OAAO,CAAC,CAACE,IAAI,CAACR,GAAG,CAAES,QAAQ,IAAI;MAC1D,IAAG,CAACA,QAAQ,CAACC,OAAO,EAAE;MACtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,4BAA4B,CAAC,CAAC,CAAC;MACjFJ,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,IAAI,CAACC,SAAS,CAACT,OAAO,CAAC,CAAC,CAAC;MAC9D,IAAI,CAACF,MAAM,CAACY,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;EACL;EACQT,gBAAgB,CAACD,OAAiB;IACxC,IAAIW,WAAW,GAAQ,EAAE;IACzB,IAAGX,OAAO,CAACY,KAAK,KAAK,OAAO,IAAIZ,OAAO,CAACa,KAAK,IAAI,OAAO,EAAC;MACvDF,WAAW,CAACP,OAAO,GAAG,IAAI;MAC1BO,WAAW,CAACX,OAAO,GAAGA,OAAO;MAC7BW,WAAW,CAACG,KAAK,GAAG,4BAA4B;MAChD,OAAOrB,EAAE,CAACkB,WAAW,CAAC;;IAExBA,WAAW,CAACP,OAAO,GAAG,KAAK;IAC3BO,WAAW,CAACX,OAAO,GAAGA,OAAO;IAC7B,OAAOP,EAAE,CAACkB,WAAW,CAAC;EACxB;EAEAI,QAAQ;IACJV,YAAY,CAACW,KAAK,EAAE;IACpB,IAAI,CAAClB,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACnC;EAEA,IAAIO,MAAM;IACR,OAAOZ,YAAY,CAACa,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,KAAK;EACrD;;AAjCSvB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAwB,SAAdxB,cAAc;EAAAyB,YAFb;AAAM","names":["of","tap","UsuarioService","constructor","httpClient","router","logar","usuario","mockUsuarioLogin","pipe","resposta","sucesso","localStorage","setItem","btoa","JSON","stringify","navigate","retornoMock","email","senha","token","deslogar","clear","logado","getItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\bruna\\OneDrive\\Área de Trabalho\\ProjetoEventsManager\\Frontend\\src\\app\\services\\usuario.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { IUsuario } from '../models/usuario'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsuarioService {\n\n  constructor(private httpClient: HttpClient,\n    private router: Router){}\n\n    logar(usuario: IUsuario) : Observable<any> {\n      return this.mockUsuarioLogin(usuario).pipe(tap((resposta) => {\n        if(!resposta.sucesso) return;\n        localStorage.setItem('token', btoa(JSON.stringify(\"TokenQueSeriaGeradoPelaAPI\")));\n        localStorage.setItem('usuario', btoa(JSON.stringify(usuario)));\n        this.router.navigate(['']);\n      }));\n    }\n    private mockUsuarioLogin(usuario: IUsuario): Observable<any> {\n      var retornoMock: any = [];\n      if(usuario.email === \"admin\" && usuario.senha == \"admin\"){\n        retornoMock.sucesso = true;\n        retornoMock.usuario = usuario;\n        retornoMock.token = \"TokenQueSeriaGeradoPelaAPI\";\n        return of(retornoMock);\n      }\n      retornoMock.sucesso = false;\n      retornoMock.usuario = usuario;\n      return of(retornoMock);\n    }\n\n    deslogar() {\n        localStorage.clear();\n        this.router.navigate(['login']);\n    }\n\n    get logado(): boolean {\n      return localStorage.getItem('token') ? true : false;\n    }\n  }\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}